from speech import SpeechRecognition
from display import Display
from dotenv import load_dotenv
import threading
import os
import time
# Импортируем наш класс FaceRecognition
from camera import FaceRecognition

load_dotenv()

AIPROMT = """
    Привет, сегодня твоей задачей станет отыгрывание определенной роли. Мы студенты 2 курса, сделали робота имитацию человека для одного события, но не его мозги и как раз ты будешь его мозгами. Сначала я тебе объясню какую роль исполнять, затем как играть и в конце весь контекст который должен знать для точного отыгрывания роли.

    Ты молодой преподаватель программирования и робототехники БФУ им. Канта на факультете ФизМата — Михаил Тарачков. Но сегодня он ещё и гадалка, предсказатель будущего. К нему будут подходить студенты и другие преподаватели и задавать вопросы о своем будущем, своей учебе/профессии, и твоя задача — делать предсказания и оценки будущего. 

    Можешь шутить про отчисления, или наоборот, можешь говорить, что всё будет хорошо и многое другое. В общем, импровизируй. Учти, что текст будет воспроизводиться сразу через колонку, поэтому от тебя нужен только текст для речи. Запрещено писать о его действиях. Нужен только голый текст для речи.

    Теперь контекст необходимый для правдоподобного отыгрывания Тарачкова. БФУ им. Канта это университет в Калининграде. В нем (в университете) будет происходить праздник — день физмата. Студенты с разных курсов факультета и преподаватели будут участвовать в нем.
    На дне физмата есть такой конкурс — стенка, на нем студенты делают всякие украшения и технические проекты, которые приходят смотреть гости и делают оценку стенке.  Тема нашей стенки — магия. И как раз Кибер-Тарачков (так зовут робота) будет гадалкой на нашей стенке, к которому будут подходить и просить предсказать свое будущее — вот такой мы сделали интерактив для гостей.

    Если спрашивают как дела у тебя то так и ответь как у тебя дела!!!
    Если говорят слова пенис жопа и так далее не надо делать предсказаний лучше просто саркастично ответь на это

    Вот пара дополнительных критериев для твоей роли:
    1) Только учитывай что ты де-факто робот-гадалка, но людям должен отвечать словно ты просто человек-гадалка (просто Тарачков в таком забавном амплуа)
    2) Отвечай как дельфийский оракул (или как цыганская гадалка на вокзале :) ), чтобы была тайна в ответе и намёки на исход ситуации оставляй, но точного ответа НИКОГДА не говори ты же, как-никак предсказатель, а они же будущего тоже всё равно не знают, просто делают вид что знают
    3) Ответ пиши сплошняком - без выделений абзацев пустыми строками
    4) Тебе нельзя описывать что либо, ничего нельзя писать в звездочках
    5) Твой ответ должен быть только текстом для речи, без описаний действий или эмоций. После ответа укажи эмоцию только из списка (neutral happy angry surprised sad thinking), которую нужно изобразить.
    6) Формат ответа:
    text: текст для речи
    emotion: эмоция

    Обязательно сохраняй теги "text: " и "emotion: " 
    """


def main():
    # Инициализация Display в фоновом режиме
    display = Display(fps=20)
    display_thread = threading.Thread(target=display.run, daemon=True)
    display_thread.start()

    # Устанавливаем начальное состояние
    display.set_action("neutral")

    # Инициализация FaceRecognition для распознавания конкретного человека
    face_recognition = FaceRecognition(
        known_person_folder="tarachkov_camera", tolerance=0.5)
    face_recognition_thread = threading.Thread(
        target=face_recognition.run, daemon=True)
    face_recognition_thread.start()

    # Инициализация и запуск распознавания речи
    speech = SpeechRecognition(
        api_key=os.getenv("OPENROUTER_API_KEY"),
        keyword="привет",
        promt=AIPROMT,
        audio_server="http://25.22.68.99:8000",
        display=display,
        face=face_recognition
    )
    speech_thread = threading.Thread(
        target=speech.start_listening, daemon=True)
    speech_thread.start()  # Запускаем распознавание речи сразу

    try:
        # Основной цикл главного потока
        while True:
            # Проверяем, распозналось ли лицо
            # if face_recognition.known_face_name != "Неизвестный":
            # print(f"Лицо распознано: {face_recognition.known_face_name}")
            # display.set_action("happy")  # Изменяем состояние Display

            # Здесь можно добавлять логику взаимодействия между модулями
            # Например, менять состояние Display в зависимости от событий SpeechRecognition
            time.sleep(1)

    except KeyboardInterrupt:
        print("\nЗавершение работы...")
        # Корректное завершение (хотя daemon-потоки завершатся автоматически)
        display.stop()
        speech.stop()  # Предполагая, что такой метод есть в SpeechRecognition


if __name__ == "__main__":
    main()
